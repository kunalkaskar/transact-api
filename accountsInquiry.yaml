swagger: '2.0'
info:
  description: | 
    This document describes a subset of UniConnect Transact&trade; Open Banking API collection.
    These APIs are implemented using REST-like conventions, uses HTTP/1.1 and JSON messages. 

    UniConnect Transact&trade; currently supports Retail Bank and Small Business (fka SME) accounts.
    These APIs are intended for consumer facing applications, and are not suitable for developing 
    assisted-channel, banch, backoffice or sales force applications. 

    The diagram below gives a high-level view of how a typical application (App) will communicate with
    a Bank or FI (Backend) using UniConnect Open Banking APIs (System). Keep this picture in mind as
    you see references of Frontend, System and Backend throughout this document. 

        +--------------+       +--------------+       +--------------+
        |     Apps     |       |  UniConnect  |       |   Bank/FIs   |
        |              <------->     APIs     <------->              |
        |  (Frontend)  |       |   (System)   |       |   (Backend)  |
        +--------------+       +--------------+       +--------------+


  version: 2.0.1
  title: UniConnect Transactâ„¢ API
  contact:
    email: api-support@uniconnect.io
host: uniconnect-transact.azure-api.net
basePath: /
schemes:
  - https
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
paths:
  /security/authentication/access-token:
    post:
      tags:
        - Security
      summary: Validates customer credentials, creates a new server-side session and returns an 
        Access-Token containing sessionid. 
      description: This operation works similar to [OAuth2's Resource Owner Password Credentials
        Grant](https://tools.ietf.org/html/rfc6749#section-4.3) flow.
      operationId: authenticateUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Credentials
          description: Email and Password required
          required: true
          schema:
            $ref: '#/definitions/Credentials'
      responses:
        '201':
          description: Successfully logged in.
          schema:
            $ref: '#/definitions/AccessToken'
        '401':
          description: Invalid credentials.
  /customermgmt/welcome/profile:
    get:
      security:
        - Bearer: []
      tags:
        - Customer Management
      summary: Gets User's basic profile data, such as name, dob and last login time. 
      description: ''
      operationId: getWelcomeProfile
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Profile received successfully.
          schema:
            $ref: '#/definitions/WelcomeProfile'
        '401':
          description: Not Authorized
        '404':
          description: User profile not found
  /customermgmt/welcome/messages:
    get:
      security:
        - Bearer: []
      tags:
        - Customer Management
      summary: Gets list of welcome messages and notices, such as new feature announcement or system
        maintenance notice  
      description: ''
      operationId: getWelcomeMessageList
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Messages Retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/WelcomeMessage'
        '401':
          description: Not Authorized
  /customermgmt/profile/relationships:
    get:
      security:
        - Bearer: []
      tags:
        - Customer Management
      summary: Gets list of relationships associated with customer   
      description: > 
        A relationship typically groups one or more accounts together, and may be shared by multiple
        customers. E.g. A joint checking account creates a relationship involving one checking
        account and two (or more) customers. Similarly, a customer could have two relationships each
        containing a pair of checking and savings account. In general, contact details such as
        postal address, phone numbers and email are maintained at a relationship level. Similarly, 
        statements are also generated at relationship level. Some backends may not implement a 
        concept of relationships, in which case this operation will return a 404 response code. 
      operationId: getCustomerRelationships
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Relationship list retrieved successfully 
          schema:
            type: array
            items: 
              $ref: '#/definitions/CustomerRelationship'
        '401':
          description: Not Authorized
        '404':
          description: No relationships found
  /customermgmt/profile/profile: 
    get:
      security:
        - Bearer: []
      tags:
        - Customer Management
      summary: Gets customer's primary or default profile
      description: Customer profile contains data describing the customer, and may includes 
        biographical data, income data, employer details and contact information. 
      operationId: getCustomerPrimaryProfile
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Profile received successfully.
          schema:
            $ref: '#/definitions/CustomerProfile'
        '401':
          description: Not Authorized
        '404':
          description: User profile not found
  /customermgmt/profile/addresses:
    get:
      security:
        - Bearer: []
      tags:
        - Customer Management
      summary: Gets list of addresses associated with customer across select or all relationships
      operationId: getPostalAddressList
      parameters:
        - name: relids
          in: query
          required: false
          description: Optional list of relationship ids to filter output, eg. ["123456", "345678"].
            If not specified, then addresses across all relationships will be returned. 
          type: array
          items: 
            type: string
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Address List retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/PostalAddress'
        '401':
          description: Not Authorized
        '404':
          description: No addresses found
  /customermgmt/profile/addresses/{id}:
    put:
      security:
        - Bearer: []
      tags:
        - Customer Management
      summary: Updates specified customer address object 
      description: ''
      operationId: updatePostalAddress
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/PostalAddress'
      produces:
        - application/json
      responses:
        '200':
          description: Address updated successfully
          schema:
            $ref: '#/definitions/AddressUpdateResponse'
        '401':
          description: Not Authorized
        '404':
          description: Address not found
  /customermgmt/profile/telephones:
    get:
      security:
        - Bearer: []
      tags:
        - Customer Management
      summary: Gets list of telephones associated with customer across select or all relationships
      operationId: getTelephoneList
      parameters:
        - name: relids
          in: query
          required: false
          description: Optional list of relationship ids to filter output, eg. ["123456", "345678"].
            If not specified, then telephones across all relationships will be returned. 
          type: array
          items: 
            type: string
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Telephone list retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Telephone'
        '401':
          description: Not Authorized
        '404':
          description: No telephones found
  /customermgmt/profile/telephones/{id}:
    put:
      security:
        - Bearer: []
      tags:
        - Customer Management
      summary: Updates specified customer telephone object 
      description: ''
      operationId: updateTelephone
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Telephone'
      produces:
        - application/json
      responses:
        '200':
          description: Telephone updated successfully
          schema:
            $ref: '#/definitions/TelephoneUpdateResponse'
        '401':
          description: Not Authorized
        '404':
          description: Telephone not found
  /customermgmt/profile/emails:
    get:
      security:
        - Bearer: []
      tags:
        - Customer Management
      summary: Gets list of emails associated with customer across select or all relationships
      operationId: getEmailList
      parameters:
        - name: relids
          in: query
          required: false
          description: Optional list of relationship ids to filter output, eg. ["123456", "345678"].
            If not specified, then emails across all relationships will be returned. 
          type: array
          items: 
            type: string
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Email list retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Email'
        '401':
          description: Not Authorized
        '404':
          description: No emails found
  /customermgmt/profile/emails/{id}:
    put:
      security:
        - Bearer: []
      tags:
        - Customer Management
      summary: Updates specified customer email object 
      description: ''
      operationId: updateEmail
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Email'
      produces:
        - application/json
      responses:
        '200':
          description: Email updated successfully
          schema:
            $ref: '#/definitions/EmailUpdateResponse'
        '401':
          description: Not Authorized
        '404':
          description: Email not found
  /accountmgmt/retail/accounts:
    get:
      security:
        - Bearer: []
      tags:
        - Account Management
      summary: Gets list of retail accounts linked to customer across all relationships
      description: Retail accounts are banking products offered to consumers. These include checking
        and savings accounts, term deposits, personal loans, mortgage, credit line, and credit cards. 
        It is distinct from commercial bank accounts, investment accounts and capital markets.  
      operationId: getRetailAccountList
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Account List retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/RetailAccount'
        '401':
          description: Not Authorized
  '/accountmgmt/retail/accounts/{id}':
    get:
      security:
        - Bearer: []
      tags:
        - Account Management
      summary: Gets account details and balances for a given account
      description: ''
      operationId: getRetailAccountDetails
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Account details retrieved successfully
          schema:
            $ref: '#/definitions/AccountDetail'
        '401':
          description: Not Authorized
  '/accountmgmt/retail/accounts/{id}/transactions':
    get:
      security:
        - Bearer: []
      tags:
        - Account Management
      summary: Gets transactions history for a given account
      description: ''
      operationId: getAccountTransactionHistory
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: Transaction details retrieved successfully
        - name: fromDate
          in: query
          type: string
          description: Transaction histrory start date.
          format: date
        - name: toDate
          in: query
          type: string
          description: Transaction histrory end date.
          format: date
      responses:
        '200':
          description: Transaction details retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Transactions'
        '401':
          description: Not Authorized
  '/payments/transfer/ft':
    post:
      security:
        - Bearer: []
      tags:
        - Payments
      summary: Transfer funds from one linked account to another
      description: ''
      operationId: fundTransfer
      parameters:
        - name: transaction
          in: body
          schema:
            $ref: '#/definitions/FundTransfer'
      responses:
        '200':
          description: Transaction details retrieved successfully
          schema:
            items:
              $ref: '#/definitions/Transactions'
        '401':
          description: Not Authorized
definitions:
  Error: 
    type: object
    description: Generic error object
    properties: 
      code: 
        type: string
        description: Error code returned by backend or system
      message: 
        type: string
        description: Error message returned by backend or system
      moreInfo: 
        type: object
        description: Error object returned by backend or system, if any
  Credentials:
    type: object
    required: 
    - email
    - password
    - strategy
    - bankId
    properties:
      email:
        type: string
        description: Registered user email address.
      password:
        type: string
        description: Password associated with registered user email.
      strategy:
        type: string
        description: TODO Strategy needs to be updated.
        default: local
        enum:
        - local
        - jwt
      bankId:
        type: string
        description: Specific bank Id which is associated with the user.
  AccessToken:
    type: object
    properties:
      accessToken:
        type: string
        description: Logged in user JWT token.
  WelcomeProfile:
    type: object
    description: Short version of full customer profile object, containing only key elements
    properties:
      name:
        type: object
        properties:
          title:
            type: string
          firstName:
            type: string
          lastName:
            type: string
      lastLogin:
        type: string
        format: date-time
      birthday:
        type: string
        format: date
      gender:
        type: string
      customerType:
        type: string
        description: Backend assigned customer segment or class type, e.g. basic, premier, gold 
  CustomerRelationship:
    type: object
    description: Customer Relationship object
    properties: 
      id: 
        type: string
        description: System assigned unique relationship id, e.g. uuid
      relNo: 
        type: string
        description: Backend assigned relationship account number
      type: 
        type: string
        description: Backend assigned relationship type, e.g. Joint, JWTROS, household
      description: 
        type: string
        description: Backend assigned relationship name/description, e.g. Basic Banking Package
      default: 
        type: boolean
        description: Indicates if this relationship is default or primary for customer 
  CustomerProfile:
    type: object
    properties:
      customerType:
        type: string
        description: Backend assigned customer segment or class type, e.g. basic, premier, gold 
      biographics:
        description: Customer's biographical data, like name, dob, marital status, etc.
        type: object
        properties:
          firstName:
            type: string
          middleName: 
            type: string 
          lastName:
            type: string
          prefix:
            type: string
            description: Name prefix, e.g. Mr, Mrs, Dr, Sir
          suffix:
            type: string
            description: Name suffix, e.g. Jr, Sr, II
          gender:
            type: string
          dob:
            type: string
            format: date
          placeOfBirth:
            type: string
          countryOfBirth:
            type: string
          residencyCountryCode:
            type: string
          residencyStatus:
            type: string
          residencyType:
            type: string
          nationality:
            type: string
          maritalStatus:
            type: string
      addresses:
        type: array
        description: List of postal addresses associated with User
        items:
          $ref: '#/definitions/PostalAddress'
      emails:
        type: array
        description: List of email addresses associated with User
        items:
          $ref: '#/definitions/Email'
      phones:
        type: array
        description: List of telephone numbers associated with User
        items:
          $ref: '#/definitions/Telephone'
      socialMediaAccounts:
        type: array
        description: Customer social media related information.
        items:
          type: object
          properties:
            id:
              type: string
            service:
              type: string
              description: Social media service name, e.g. Facebook, Twitter, Wechat, Snapchat 
            accountId:
              type: string
            preferred:
              type: boolean
      idDocs:
        type: array
        items:
          type: object
          properties:
            type:
              type: string
            primary:
              type: boolean
            number:
              type: string
            expiry:
              type: string
              format: date-time
            issuancePlace:
              type: string
            issuanceCountry:
              type: string
      education:
        type: string
        description: Customer education related information.
      employment:
        type: array
        description: Customer employment related information.
        items:
          type: object
          properties:
            employerName:
              type: string
            jobTitle:
              type: string
            occupationCode:
              type: string
            description:
              type: string
            industryCode:
              type: string
            duration:
              type: string
            email:
              type: string
      financialInfo:
        type: array
        description: Customer financial related information.
        items:
          type: string
  AddressUpdateResponse: 
    type: object
    description: Response entity of updatePostalAddress operation
    allOf: 
    - $ref: '#/definitions/TxnResponse'
    - type: object
      properties: 
        txnResponse: 
          $ref: '#/definitions/PostalAddress' 
  TelephoneUpdateResponse: 
    type: object
    description: Response entity of updateTelephone operation
    allOf: 
    - $ref: '#/definitions/TxnResponse'
    - type: object
      properties: 
        txnResponse: 
          $ref: '#/definitions/Telephone' 
  EmailUpdateResponse: 
    type: object
    description: Response entity of updateEmail operation
    allOf: 
    - $ref: '#/definitions/TxnResponse'
    - type: object
      properties: 
        txnResponse: 
          $ref: '#/definitions/Email' 
  WelcomeMessage:
    properties:
      title:
        type: string
      body:
        type: string
      messageType:
        type: string
      link:
        type: string
  AccountDetail:
    type: object
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
      type:
        type: string
      balance:
        items:
          $ref: '#/definitions/AccountBalance'
  RetailAccount:
    type: object
    properties:
      accountNo:
        type: string
      currency:
        type: string
      workBalance:
        type: string
      accountType:
        type: string
      ledgerBalance:
        type: string
      clearedBalance:
        type: string
      lockBalance:
        type: string
      usableBalance:
        type: string
      accountId:
        type: number
  AccountBalance:
    type: object
    description: Customer balance related information.
    properties:
      balanceType:
        type: string
      amount:
        type: number
        format: double
      currencyCode:
        type: string
  Transactions:
    type: object
    description: Customer transaction related information.
    properties:
      transactionDate:
        type: string
        format: date-time
      description:
        type: string
      reference:
        type: string
      localCurrency:
        type: string
      debit:
        type: string
      credit:
        type: string
  FundTransfer:
    type: object
    description: Fund Transfer related information.
    required:
      - accountId
      - creditActId
      - creditAmount
    properties:
      accountId:
        type: string
      creditActId:
        type: string
      creditAmount:
        type: string
  PostalAddress:
    type: object
    description: Based on https://schema.org/PostalAddress
    properties:
      id:
        type: string
        description: ID to uniquely retrieve/update this address object, e.g. add1, 001
      relid:
        type: string
        description: Relationship ID, if this address is associated with a specific relationship
      type:
        type: string
        description: Business defined classification for addresses, e.g. mailing, residential
      label: 
        type: string
        description: User defined optional label for easy reference, e.g. myhome
      line1:
        type: string
      line2:
        type: string
      line3:
        type: string
      line4:
        type: string
      locality:
        type: string
        description: City/Town/Township, e.g. Mountain View
      region:
        type: string
        description: Province/Region/State/Territory, e.g. CA
      postalCode:
        type: string
      country:
        type: string
  Telephone: 
    type: object
    description: Based on https://schema.org/telephone
    properties:
      id:
        type: string
        description: ID to uniquely retrieve or update this phone object, e.g. tel01, 001
      relid:
        type: string
        description: Relationship ID, if this telephone is associated with a specific relationship
      type:
        type: string
        description: Business defined classification for telephone, e.g. personal, work
      label: 
        type: string
        description: User defined optional label for easy reference, e.g. myhomeph
      number:
        type: string
        description: Telephone number, e.g. +16509036300, (650) 903-6300, 6509036300
      countryCode:
        type: string
        description: Optional if already included in number, e.g. +1
      areaCode:
        type: string
        description: Optional if already included in number, e.g. 650
      ext:
        type: string
        description: Optional extension number, e.g. 100
  Email: 
    type: object
    description: Based on https://schema.org/email
    properties:
      id:
        type: string
        description: ID to uniquely retrieve or update this email object, e.g. email01, 001
      relid:
        type: string
        description: Relationship ID, if this email is associated with a specific relationship
      type:
        type: string
        description: Business defined classification for emails, e.g. personal, work
      label: 
        type: string
        description: User defined optional label for easy reference, e.g. gmailid
      email:
        type: string
        description: E-Mail address, e.g. foo@example.com
      preferred:
        type: boolean
  TxnResponse: 
    type: object
    description: Generic schema representing response of a transaction process 
    properties: 
      txnId:
        type: string
        format: uuid
        description: UUID to identify this transaction within the system
      txnRef: 
        type: string
        description: Backend or system assigned transaction reference number, for customer 
          communication purposes
      txnStatus: 
        type: string
        description: Backend transaction processing status after acceptance, e.g. accepted, 
          pending, queued
